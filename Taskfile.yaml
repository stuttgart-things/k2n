---
version: 3
vars:
  PROJECT_NAME:
    sh: echo ${PWD##*/}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi
  DAGGER_GO_MODULE: ~/projects/blueprints/go-microservice/ #github.com/stuttgart-things/blueprints/go-microservice  #@{{ .DAGGER_GO_MODULE_VERSION }}
  DAGGER_GO_MODULE_VERSION: v1.10.0

dotenv: ['.env', '{{.HOME}}/.env']

tasks:
  ci-static:
    desc: Run static checks
    vars:
      STATIC_REPORT_PATH: /tmp/{{ .PROJECT_NAME }}/{{ .PROJECT_NAME }}-static.json
    cmds:
      - |
        dagger call -m {{ .DAGGER_GO_MODULE }} \
        run-static-stage \
        --src ./ \
        --goVersion 1.24.1 \
        --lintCanFail=true \
        -vv --progress plain \
        export --path={{ .STATIC_REPORT_PATH }}
        code {{ .STATIC_REPORT_PATH }}

  ci-build:
    desc: Build binary + image
    vars:
      BUILD_PATH: /tmp/{{ .PROJECT_NAME }}
    cmds:
      - |
        dagger call -m {{ .DAGGER_GO_MODULE }} \
        run-build-stage \
        --src ./ \
        --ko-build=false \
        --bin-name {{ .PROJECT_NAME }} \
        --progress plain -vv \
        export --path={{ .BUILD_PATH }}
        ls -lta {{ .BUILD_PATH }}

  run-and-test:
    desc: run and test the application
    cmds:
      - |
        go run main.go gen \
        --examples-dirs examples/examples \
        --ruleset-env-dir examples/ruleset-env \
        --ruleset-usecase-dir examples/ruleset-runner \
        --usecase crosssplane \
        --instruction "give me a runner-claim for the repository dagger for the cluster sthings"

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  commit:
    desc: Commit + push code into branch
    deps: [check]
    cmds:
      - rm -rf dist/
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - |
        git add *
        if [[ -n $(git status --porcelain) ]]; then
          echo "committing changes"
          echo "ENTER COMMIT MESSAGE"
          COMMIT_MESSAGE=$(echo $(gum choose "feat: {{ .BRANCH }}" "fix: {{ .BRANCH }}" "BREAKING CHANGE: {{ .BRANCH }}" "ENTER CUSTOM COMMIT MESSAGE"))

          if [ "$COMMIT_MESSAGE" == "ENTER CUSTOM COMMIT MESSAGE" ]; then
            COMMIT_MESSAGE=$(echo $(gum input --placeholder "scope" --value "commit to {{ .BRANCH }}"))
          fi

          git commit --allow-empty -a -m "$(echo ${COMMIT_MESSAGE})"
        else
          echo "no changes"
        fi
        git push origin -u {{ .BRANCH }}

  check:
    desc: "Run pre-commit hooks"
    cmds:
      - pre-commit run -a

  do:
    desc: Select a task to run
    cmds:
      - |
        task=$(yq e '.tasks | keys' Taskfile.yaml | sed 's/^- //' | gum choose)
        task ${task}
# check: https://github.com/act3-ai/dagger/blob/main/release/main.go
